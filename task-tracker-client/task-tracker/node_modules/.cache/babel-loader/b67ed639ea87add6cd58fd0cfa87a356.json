{"ast":null,"code":"var _jsxFileName = \"/home/ac/Development/Code/Flatiron/Phase-3/Task-Tracker/task-tracker-client/task-tracker/src/Components/Tasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport EditTask from \"./EditTask\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tasks(_ref) {\n  _s();\n\n  let {\n    tasksArr,\n    currentUser,\n    setTasksArr,\n    setIsComplete,\n    isComplete\n  } = _ref;\n  const [edit, setEdit] = useState(false);\n  const [currentTaskId, setCurrentTaskId] = useState(1); // let complete = \"complete\";\n\n  let specificTask = tasksArr.filter(task => task.id.toString() === currentTaskId.toString());\n\n  function handleDelete(id) {\n    fetch(`http://localhost:9292/tasks/${id}`, {\n      method: \"DELETE\"\n    }).then(r => r.json()).then(() => {\n      const updatedTasksArr = tasksArr.filter(task => task.id !== id);\n      setTasksArr(updatedTasksArr);\n    });\n  }\n\n  function handleComplete(id) {\n    fetch(`http://localhost:9292/tasks/${id}`, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        task: specificTask[0].task,\n        complete: isComplete\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(r => r.json()).then(taskUpdate => {\n      handleCompleteTask(taskUpdate);\n    });\n    setIsComplete(\"incomplete\");\n  }\n\n  function handleCompleteTask(updateComplete) {\n    const taskUpdate = tasksArr.map(task => {\n      if (task.id === updateComplete.id) {\n        updateComplete.complete = isComplete;\n        return updateComplete;\n      } else {\n        return task;\n      }\n    });\n    setTasksArr(taskUpdate);\n  }\n\n  function showEdit(e) {\n    setEdit(true);\n    setCurrentTaskId(e.target.className);\n  }\n\n  const display = tasksArr.map(task => {\n    if (task.user_id === currentUser.id && edit === false) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: task.id,\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: task.complete,\n          children: task.task\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(task.id),\n          className: \"delete\",\n          children: \"delete\"\n        }, task.task, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: task.id,\n          onClick: showEdit,\n          children: \"edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onMouseLeave: () => {\n            setIsComplete(\"incomplete\");\n          },\n          onMouseOver: e => {\n            setCurrentTaskId(e.target.className);\n            setIsComplete(\"complete\");\n          },\n          onClick: e => {\n            e.preventDefault();\n            handleComplete(specificTask[0].id);\n          },\n          className: task.id,\n          children: \"done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this);\n    } else if (task.user_id === currentUser.id && task.id.toString() === currentTaskId.toString() && edit === true) {\n      return /*#__PURE__*/_jsxDEV(EditTask, {\n        isComplete: isComplete,\n        specificTask: specificTask,\n        setEdit: setEdit,\n        tasksArr: tasksArr,\n        setTasksArr: setTasksArr,\n        currentTaskId: currentTaskId,\n        edit: edit\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this);\n    } else {\n      return null;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: display\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Tasks, \"sbFxyVG1VIYndJ8DsBURlh10PDc=\");\n\n_c = Tasks;\nexport default Tasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"sources":["/home/ac/Development/Code/Flatiron/Phase-3/Task-Tracker/task-tracker-client/task-tracker/src/Components/Tasks.js"],"names":["React","useState","EditTask","Tasks","tasksArr","currentUser","setTasksArr","setIsComplete","isComplete","edit","setEdit","currentTaskId","setCurrentTaskId","specificTask","filter","task","id","toString","handleDelete","fetch","method","then","r","json","updatedTasksArr","handleComplete","body","JSON","stringify","complete","headers","taskUpdate","handleCompleteTask","updateComplete","map","showEdit","e","target","className","display","user_id","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport EditTask from \"./EditTask\";\n\nfunction Tasks({\n  tasksArr,\n  currentUser,\n  setTasksArr,\n  setIsComplete,\n  isComplete,\n}) {\n  const [edit, setEdit] = useState(false);\n  const [currentTaskId, setCurrentTaskId] = useState(1);\n  // let complete = \"complete\";\n\n  let specificTask = tasksArr.filter(\n    (task) => task.id.toString() === currentTaskId.toString()\n  );\n\n  function handleDelete(id) {\n    fetch(`http://localhost:9292/tasks/${id}`, {\n      method: \"DELETE\",\n    })\n      .then((r) => r.json())\n      .then(() => {\n        const updatedTasksArr = tasksArr.filter((task) => task.id !== id);\n        setTasksArr(updatedTasksArr);\n      });\n  }\n\n  function handleComplete(id) {\n    fetch(`http://localhost:9292/tasks/${id}`, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        task: specificTask[0].task,\n        complete: isComplete,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((r) => r.json())\n      .then((taskUpdate) => {\n        handleCompleteTask(taskUpdate);\n      });\n    setIsComplete(\"incomplete\");\n  }\n\n  function handleCompleteTask(updateComplete) {\n    const taskUpdate = tasksArr.map((task) => {\n      if (task.id === updateComplete.id) {\n        updateComplete.complete = isComplete;\n        return updateComplete;\n      } else {\n        return task;\n      }\n    });\n    setTasksArr(taskUpdate);\n  }\n\n  function showEdit(e) {\n    setEdit(true);\n    setCurrentTaskId(e.target.className);\n  }\n\n  const display = tasksArr.map((task) => {\n    if (task.user_id === currentUser.id && edit === false) {\n      return (\n        <div id={task.id} key={task.id}>\n          <li className={task.complete} key={task.id}>\n            {task.task}\n          </li>\n          <button\n            key={task.task}\n            onClick={() => handleDelete(task.id)}\n            className=\"delete\"\n          >\n            delete\n          </button>\n          <button className={task.id} onClick={showEdit}>\n            edit\n          </button>\n          <button\n            onMouseLeave={() => {\n              setIsComplete(\"incomplete\");\n            }}\n            onMouseOver={(e) => {\n              setCurrentTaskId(e.target.className);\n              setIsComplete(\"complete\");\n            }}\n            onClick={(e) => {\n              e.preventDefault();\n              handleComplete(specificTask[0].id);\n            }}\n            className={task.id}\n          >\n            done\n          </button>\n        </div>\n      );\n    } else if (\n      task.user_id === currentUser.id &&\n      task.id.toString() === currentTaskId.toString() &&\n      edit === true\n    ) {\n      return (\n        <EditTask\n          isComplete={isComplete}\n          key={task.id}\n          specificTask={specificTask}\n          setEdit={setEdit}\n          tasksArr={tasksArr}\n          setTasksArr={setTasksArr}\n          currentTaskId={currentTaskId}\n          edit={edit}\n        />\n      );\n    } else {\n      return null;\n    }\n  });\n\n  return <div>{display}</div>;\n}\n\nexport default Tasks;\n"]},"metadata":{},"sourceType":"module"}